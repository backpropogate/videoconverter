import { MediaConvertServiceException as __BaseException } from "./MediaConvertServiceException";
export const QueueStatus = {
    ACTIVE: "ACTIVE",
    PAUSED: "PAUSED",
};
export class BadRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadRequestException.prototype);
        this.Message = opts.Message;
    }
}
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
export class ForbiddenException extends __BaseException {
    constructor(opts) {
        super({
            name: "ForbiddenException",
            $fault: "client",
            ...opts,
        });
        this.name = "ForbiddenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ForbiddenException.prototype);
        this.Message = opts.Message;
    }
}
export class InternalServerErrorException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerErrorException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerErrorException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerErrorException.prototype);
        this.Message = opts.Message;
    }
}
export class NotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class TooManyRequestsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
        this.Message = opts.Message;
    }
}
export const DescribeEndpointsMode = {
    DEFAULT: "DEFAULT",
    GET_ONLY: "GET_ONLY",
};
export const InputPolicy = {
    ALLOWED: "ALLOWED",
    DISALLOWED: "DISALLOWED",
};
export const JobTemplateListBy = {
    CREATION_DATE: "CREATION_DATE",
    NAME: "NAME",
    SYSTEM: "SYSTEM",
};
export const Order = {
    ASCENDING: "ASCENDING",
    DESCENDING: "DESCENDING",
};
export const PresetListBy = {
    CREATION_DATE: "CREATION_DATE",
    NAME: "NAME",
    SYSTEM: "SYSTEM",
};
export const QueueListBy = {
    CREATION_DATE: "CREATION_DATE",
    NAME: "NAME",
};
